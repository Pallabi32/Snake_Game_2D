#Snake game source code, where the snake would swallow an apple each time and increase its score and 
#game comes to over when snake collides 
#importing all the required modules
import pygame
from pygame.locals import *
import time
import random

SIZE = 40 #size has been set according to the pixel size of the images used
BACKGROUND_COLOR = (0, 0, 0) # background color set to black (any color can be chosen based on rgb standard)
#this program is developed using OOP concepts. Hence, different class has been assigned to different game objects
class Apple:
    def __init__(self, parent_screen):
        self.image = pygame.image.load("block1.JPG").convert() #image for the apple
        self.parent_screen = parent_screen
        self.x = SIZE*3 #defining x & y coordinates in the gaming screen
        self.y = SIZE*3
#function for the non-display of apple after swallowing
    def draw(self):
        self.parent_screen.blit(self.image, (self.x, self.y))
        pygame.display.flip()
#function for the random placement of apple after each swallowing
    def move(self):
        self.x = random.randint(0, 24)*SIZE
        self.y = random.randint(0, 24)*SIZE
#class snake
class Snake:
    def __init__(self, parent_screen, length):
        self.length=length
        self.parent_screen = parent_screen
        self.block = pygame.image.load("snakeblock1.jpg").convert()#image for the snake's body
        self.x=[SIZE]*length
        self.y=[SIZE]*length
        self.direction = 'down' #starting direction fixation of the snake (can be given left, right or up)
#function for length increment of the snake after swallowing an apple
    def increase_length(self):
        self.length+=1
        self.x.append(-1)
        self.y.append(-1)
#function for the non-display of snake's body after moving away from a point in the screen
    def draw(self):
        self.parent_screen.fill((BACKGROUND_COLOR))
        for i in range(self.length):
            self.parent_screen.blit(self.block, (self.x[i], self.y[i]))
        pygame.display.flip()
#functions for changing direction of the moving snake by the user
    def move_left(self):
        self.direction = 'left'
    def move_right(self):
        self.direction = 'right'
    def move_up(self):
        self.direction = 'up'
    def move_down(self):
        self.direction = 'down'
    def walk(self):

        for i in range(self.length-1, 0, -1):
            self.x[i] = self.x[i-1]
            self.y[i] = self.y[i-1]

        if self.direction == 'up':
            self.y[0] -= SIZE
        if self.direction == 'down':
            self.y[0] += SIZE
        if self.direction == 'left':
            self.x[0] -= SIZE
        if self.direction == 'right':
            self.x[0] += SIZE

        self.draw()
#class game
class Game:
    def __init__(self):
        pygame.init()
        self.surface = pygame.display.set_mode((1000, 1000))#game screen area in pixels
        self.snake=Snake(self.surface, 1)#an initial size of snakeâ€™s body set
        self.snake.draw()
        self.apple = Apple(self.surface)
        self.apple.draw()
#function for collision with body of the snake
    def is_collision(self, x1, y1, x2, y2):
        if x1 >= x2 and x1 < x2 + SIZE:
            if y1 >= y2 and y1 < y2 +SIZE:
                return True
        return False
    def play(self):
        self.snake.walk()
        self.apple.draw()
        self.display_score()
        pygame.display.flip()
        if self.is_collision(self.snake.x[0], self.snake.y[0], self.apple.x, self.apple.y):
            self.snake.increase_length()
            self.apple.move()
        for i in range(1,self.snake.length):
            if self.is_collision(self.snake.x[0], self.snake.y[0], self.snake.x[i], self.snake.y[i]):
                raise("Collision occured")
#score display function
    def display_score(self):
        font = pygame.font.SysFont('arial', 30)
        score = font.render(f"Score: {self.snake.length}", True, (255, 255, 255))#text display in any rgb standard color 
        self.surface.blit(score, (800,10))
#game over dispplay function
    def show_game_over(self):
        self.surface.fill(BACKGROUND_COLOR)
        font = pygame.font.SysFont('arial', 30)
        line1= font.render(f"Game is over! Your score is {self.snake.length}", True, (255, 255, 255))
        self.surface.blit(line1, (200, 300))
        line2 =font.render("To play again press Enter. To exit press Escape!", True, (255, 255, 255))
        self.surface.blit(line2, (200, 350))
        pygame.display.flip()
#function for resetting the game after the user has pressed enter
    def reset(self):
        self.snake = Snake(self.surface, 1)
        self.apple = Apple(self.surface)
    def run(self):
        running = True
        pause = False
        while running:
            for event in pygame.event.get():
                if event.type == KEYDOWN:
                    if event.key == K_ESCAPE:
                        running = False
                    if event.key == K_RETURN:
                        pause = False
                    if not pause:
                        if event.key == K_UP:
                            self.snake.move_up()

                        if event.key == K_DOWN:
                            self.snake.move_down()

                        if event.key == K_LEFT:
                            self.snake.move_left()

                        if event.key == K_RIGHT:
                            self.snake.move_right()

                elif event.type == QUIT:
                    running = False
            try:
                if not pause:
                    self.play()
            except Exception as e:
                self.show_game_over()
                pause = True
                self.reset()
            time.sleep(0.3)#speed of the movement of snake.
#the main function of the whole program.
if __name__ == "__main__":
    game = Game()
    game.run()
